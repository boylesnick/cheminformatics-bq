# create a sample dataset from SAVI

create or replace table `sample_data.smiles` as
(
SELECT product_smiles as smiles,
from `nih-nci-cbiit-chem-prod.savi.plus` TABLESAMPLE SYSTEM (1 percent)
where rand() < 0.1
)

# run an inline substructure substructure_search

SELECT `life-sciences-333615.cheminformatics_test.rdkit_substructure_match`("CCCC", "CCCCC");

# run an inline pattern fingerprint call

SELECT `life-sciences-333615.cheminformatics_test.rdkit_pattern_fingerprint_test`("CCCCCN");




# create table with bin_id for partitioning

create or replace table sample_data.smiles_bin
as
SELECT product_smiles as smiles,
 fhoffa.x.random_int(0,3999) as bin_id 
from `nih-nci-cbiit-chem-prod.savi.plus` 
where rand() < 0.001


# partition table based on bin_id

CREATE TABLE sample_data.smiles_bin_parted (smiles STRING, bin_id INT64)
PARTITION BY
  RANGE_BUCKET(bin_id, GENERATE_ARRAY(0, 3999, 1))
as
(select * from sample_data.smiles_bin)


# calculate fingerprints and descriptors

create or replace table exports.savi_fp_mol_descriptors_json
as
SELECT smiles,
`cheminformatics_test.rdkit_pattern_fingerprint_test`(smiles) as fingerprint_json,
`cheminformatics_test.rdkit_molecular_descriptors`(smiles) as molecular_descriptors_json
from `sample_data.smiles_bin_parted` 



SELECT smiles,
CAST(JSON_VALUE(molecular_descriptors_json, "$.ExactMolWt") as FLOAT64 ) as exact_mol_wt,
CAST(JSON_VALUE(molecular_descriptors_json, "$.FractionCSP3") as FLOAT64 ) as fraction_csp3,
CAST(JSON_VALUE(molecular_descriptors_json, "$.BalabanJ") as FLOAT64 ) as balabanj,
CAST(JSON_VALUE(molecular_descriptors_json, "$.BertzCT") as FLOAT64 ) as bertzct,
CAST(JSON_VALUE(molecular_descriptors_json, "$.HallKierAlpha") as FLOAT64 ) as hallkieralpha,
CAST(JSON_VALUE(molecular_descriptors_json, "$.HeavyAtomMolWt") as FLOAT64 ) as heavy_atom_mol_wt,
CAST(JSON_VALUE(molecular_descriptors_json, "$.MaxAbsPartialCharge") as FLOAT64 ) as max_abs_partial_charge,
CAST(JSON_VALUE(molecular_descriptors_json, "$.MaxPartialCharge") as FLOAT64 ) as max_partial_charge,
CAST(JSON_VALUE(molecular_descriptors_json, "$.MolLogP") as FLOAT64 ) as mol_logp,
CAST(JSON_VALUE(molecular_descriptors_json, "$.MolMR") as FLOAT64 ) as mol_mr,
CAST(JSON_VALUE(molecular_descriptors_json, "$.HeavyAtomCount") as INT64 ) as heavy_atom_count,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumAliphaticRings") as INT64 ) as num_aliphatic_rings,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NHOHCount") as INT64 ) as nhoh_count,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NOCount") as INT64 ) as no_count,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumAliphaticCarbocycles") as INT64 ) as num_alpiphatic_carbocycles,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumAliphaticHeterocycles") as INT64 ) as num_aliphatic_heterocycles,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumAromaticCarbocycles") as INT64 ) as num_aromatic_carbocycles,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumAromaticHeterocycles") as INT64 ) as num_aromatic_heterocycles,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumAromaticRings") as INT64 ) as num_aromatic_rings,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumHAcceptors") as INT64 ) as num_h_acceptors,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumHDonors") as INT64 ) as num_h_donors,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumHeteroatoms") as INT64 ) as num_hetero_atoms,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumRadicalElectrons") as INT64 ) as num_radical_electrons,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumRotatableBonds") as INT64 ) as num_rotatable_bonds,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumSaturatedCarbocycles") as INT64 ) as num_saturated_carbocycles,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumSaturatedHeterocycles") as INT64 ) as num_saturated_heterocycles,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumSaturatedRings") as INT64 ) as num_saturated_rings,
CAST(JSON_VALUE(molecular_descriptors_json, "$.NumValenceElectrons") as INT64 ) as num_valence_electrons
FROM `life-sciences-333615.exports.savi_fp_mol_descriptors_json` 
where molecular_descriptors_json != ""


## install substructure search stored procedure

bq query --use_legacy_sql=false \
'CREATE OR REPLACE PROCEDURE `cheminformatics_test.substructure_search`(fragment_smiles STRING)
BEGIN
declare json_return STRING;
declare fragment_num_carbon, fragment_num_nitrogen, fragment_num_oxygen, fragment_num_fluorine, bit_count_fragment INT64;
declare fragment_pattern_fp BYTES;
declare fragment_bit_count INT64;
set json_return=`cheminformatics_test.rdkit_pattern_fingerprint_test`(fragment_smiles);
set fragment_pattern_fp = FROM_HEX(JSON_VALUE(json_return, "$.fp_pattern_long_as_binary_hex"));
set fragment_num_carbon = CAST(JSON_VALUE(json_return, "$.num_carbon") as INT64);
set fragment_num_oxygen = CAST(JSON_VALUE(json_return, "$.num_oxygen") as INT64);
set fragment_num_nitrogen = CAST(JSON_VALUE(json_return, "$.num_nitrogen") as INT64);
set fragment_num_fluorine = CAST(JSON_VALUE(json_return, "$.num_fluorine") as INT64);
set fragment_bit_count = bit_count(fragment_pattern_fp);
select smiles from `exports.savi_fp_clustered`
where
num_carbon >= fragment_num_carbon and
num_nitrogen >= fragment_num_nitrogen and
num_oxygen >= fragment_num_oxygen and
num_fluorine >= fragment_num_fluorine and
bit_count(fragment_pattern_fp & fp_pattern_as_binary) = fragment_bit_count
and
`cheminformatics_test.rdkit_substructure_match`(fragment_smiles, smiles);
END'

## install morgan similarity search 

bq query --use_legacy_sql=false \
'CREATE OR REPLACE PROCEDURE `cheminformatics_test.morgan_similarity`(smiles STRING)
BEGIN
declare json_return STRING;
declare morgan_fp BYTES;
declare in_num_carbon, in_num_nitrogen, in_num_oxygen, in_num_fluorine INT64;
set json_return=`cheminformatics_test.rdkit_pattern_fingerprint_test`(smiles);
set morgan_fp = FROM_HEX(JSON_VALUE(json_return, "$.fp_morgan_as_binary_hex"));
set in_num_carbon = CAST(JSON_VALUE(json_return, "$.num_carbon") as INT64);
set in_num_oxygen = CAST(JSON_VALUE(json_return, "$.num_oxygen") as INT64);
set in_num_nitrogen = CAST(JSON_VALUE(json_return, "$.num_nitrogen") as INT64);
set in_num_fluorine = CAST(JSON_VALUE(json_return, "$.num_fluorine") as INT64);
 select smiles from `exports.savi_fp_clustered`
where
num_carbon in (in_num_carbon-4, in_num_carbon - 3, in_num_carbon - 2, in_num_carbon - 1, in_num_carbon, in_num_carbon + 1, in_num_carbon + 2, in_num_carbon+3, in_num_carbon+4)
and
num_oxygen in (in_num_oxygen-4, in_num_oxygen - 3, in_num_oxygen - 2, in_num_oxygen - 1, in_num_oxygen, in_num_oxygen + 1, in_num_oxygen + 2, in_num_oxygen+3, in_num_oxygen+4)
and
bit_count(morgan_fp & fp_morgan_as_binary) / bit_count(morgan_fp || fp_morgan_as_binary) > 0.3;
END'