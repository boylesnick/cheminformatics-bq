declare smiles_string STRING;
declare x BYTES;
declare bit_count_x INT64;

set smiles_string="CC(C)CN([S](=O)(=O)C1=CC=C(C=C1)[S](=O)(=O)Cl)[S](C2=C(C=CC(=C2)C)OCCC(=O)O)(=O)=O";
set x = FROM_HEX(`cheminformatics_test.rdkit_pattern_fingerprint_test`(smiles_string));
set bit_count_x = bit_count(x);

SELECT product_smiles, pattern_fp FROM `life-sciences-333615.chemical_compounds.savi_fp_cleaned`
where 
bit_count( x & pattern_fp) = bit_count_x


### substructure

CREATE OR REPLACE PROCEDURE cheminformatics_test.substructure_search(smiles STRING)
BEGIN
declare fragment_smiles STRING;
declare json_return STRING;
declare fragment_num_carbon, fragment_num_nitrogen, fragment_num_oxygen, fragment_num_fluorine, bit_count_fragment INT64;
declare fragment_pattern_fp BYTES;
declare fragment_bit_count INT64;
set fragment_smiles = smiles;
set json_return=`cheminformatics_test.rdkit_pattern_fingerprint_test`(fragment_smiles);
set fragment_pattern_fp = FROM_HEX(JSON_VALUE(json_return, '$.fp_pattern_long_as_binary_hex'));
set fragment_num_carbon = CAST(JSON_VALUE(json_return, "$.num_carbon") as INT64);
set fragment_num_oxygen = CAST(JSON_VALUE(json_return, "$.num_oxygen") as INT64);
set fragment_num_nitrogen = CAST(JSON_VALUE(json_return, "$.num_nitrogen") as INT64);
set fragment_num_fluorine = CAST(JSON_VALUE(json_return, "$.num_fluorine") as INT64);
set fragment_bit_count = bit_count(fragment_pattern_fp);
select * from `life-sciences-333615.testing.savi_run3`
where
num_carbon >= fragment_num_carbon and
num_nitrogen >= fragment_num_nitrogen and
num_oxygen >= fragment_num_oxygen and
num_fluorine >= fragment_num_fluorine and
bit_count(fragment_pattern_fp & fp_pattern_as_binary) = fragment_bit_count
and
`life-sciences-333615.cheminformatics_test.rdkit_substructure_match`(fragment_smiles, smiles);
END
 

### morgan

CREATE OR REPLACE PROCEDURE cheminformatics_test.morgan_similarity(smiles STRING)
BEGIN
 
declare json_return STRING;
declare morgan_fp BYTES;
declare in_num_carbon, in_num_nitrogen, in_num_oxygen, in_num_fluorine INT64;
 
set json_return=`cheminformatics_test.rdkit_pattern_fingerprint_test`(smiles);
set morgan_fp = FROM_HEX(JSON_VALUE(json_return, '$.fp_morgan_as_binary_hex'));
set in_num_carbon = CAST(JSON_VALUE(json_return, "$.num_carbon") as INT64);
set in_num_oxygen = CAST(JSON_VALUE(json_return, "$.num_oxygen") as INT64);
set in_num_nitrogen = CAST(JSON_VALUE(json_return, "$.num_nitrogen") as INT64);
set in_num_fluorine = CAST(JSON_VALUE(json_return, "$.num_fluorine") as INT64);
 
select * from `life-sciences-333615.testing.savi_run3`
where
num_carbon in (in_num_carbon-4, in_num_carbon - 3, in_num_carbon - 2, in_num_carbon - 1, in_num_carbon, in_num_carbon + 1, in_num_carbon + 2, in_num_carbon+3, in_num_carbon+4)
and
num_oxygen in (in_num_oxygen-4, in_num_oxygen - 3, in_num_oxygen - 2, in_num_oxygen - 1, in_num_oxygen, in_num_oxygen + 1, in_num_oxygen + 2, in_num_oxygen+3, in_num_oxygen+4)
and
bit_count(morgan_fp & fp_morgan_as_binary) / bit_count(morgan_fp || fp_morgan_as_binary) > 0.3;
 
END

